import 'package:bm_flash/modules/category/component/product_card.dart';
import 'package:bm_flash/modules/seller/component/drawer_filter.dart';
import 'package:bm_flash/modules/seller/cubic/cubit_product/seller_product_cubit.dart';
import 'package:bm_flash/utils/k_images.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:sliver_tools/sliver_tools.dart';
import '../../core/remote_urls.dart';
import '../../utils/constants.dart';
import '../../utils/language_string.dart';
import '../../widgets/custom_image.dart';
import '../home/model/home_seller_model.dart';
import '/widgets/capitalized_word.dart';
import '/widgets/rounded_app_bar.dart';

class SellerDetailsScreen extends StatefulWidget {
  const SellerDetailsScreen({
    Key? key,
  }) : super(key: key);
      
  @override
  State<SellerDetailsScreen> createState() =>
      _SellerDetailsScreen();

}

class _SellerDetailsScreen
    extends State<SellerDetailsScreen> {
      
  late SellerProductCubit loadMoreBloc;
  final _controller = ScrollController();
  late String keyword;
  
  void _init() {
    _controller.addListener(() {
      print("------- SCROLL DOWN ------");
      final maxExtent = _controller.position.maxScrollExtent - 200;
      if (maxExtent < _controller.position.pixels) {
      print("------- SCROLL DOWN OKKKKK ------");
        loadMoreBloc.loadSellerProduct(keyword);
      }
    });
  }

  @override
  void initState() {
    super.initState();
    _init();
  }

  @override
  void dispose() {
    super.dispose();
    loadMoreBloc.reset();
  }

  @override
  Widget build(BuildContext context) {
    loadMoreBloc = context.read<SellerProductCubit>();
    loadMoreBloc.reset();
    final receivedName =
        ModalRoute.of(context)!.settings.arguments as Map<String, dynamic>;
    final title = receivedName['title'] as String;
    keyword = receivedName['keyword'] as String;
    loadMoreBloc.getSellerProduct(keyword);

    return Scaffold(
      endDrawer: const DrawerFilter(),
      appBar: RoundedAppBar(
        titleText: title.capitalizeByWord(),
      ),
      body: BlocBuilder<SellerProductCubit, SellerProductState>(
        builder: (context, state) {
        final double theWidth = MediaQuery.of(context).size.width * 0.8;
          // ignore: unnecessary_null_comparison
          if (state is SellerProductLoadingState && !loadMoreBloc.loaded ) {
            return const Center(child: CircularProgressIndicator());
          } else if (state is SellerProductLoadedState) {
            if (loadMoreBloc.loaded && loadMoreBloc.homeSellerModel.products.isEmpty) {
                return 
                  Column(children: [
                    const SizedBox(height: 40),
                    CustomImage(path: Kimages.emptyOrder, width: theWidth
                        // height: 55,
                        ),
                    Container(
                        padding: const EdgeInsets.symmetric(vertical: 10),
                        child: Center(
                            child: Text(Language.noItemsFound.capitalizeByWord())))
                  ]);
            }
          } else if (state is SellerProductErrorState) {
            return Column(children: [
                const SizedBox(height: 40),
                CustomImage(path: Kimages.error, width: theWidth
                    // height: 55,
                    ),
                Container(
                    padding: const EdgeInsets.symmetric(vertical: 10),
                    child: Center(
                        child: Text(
                    state.errorMessage,
                    style: const TextStyle(color: redColor),
                  )))
              ]);
          }
          /*return Center(
            child: SizedBox( loadMoreBloc.loaded 
              child: Text(
                Language.somethingWentWrong.capitalizeByWord(),
                style: GoogleFonts.openSans(color: Colors.red),
              ),
            ),
          );*/
          
          
          /*return Column(children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const SizedBox(),
                GestureDetector(
                  onTap: () => Scaffold.of(context).openEndDrawer(),
                  child: Container(
                      alignment: Alignment.center,
                      decoration:
                          const BoxDecoration(color: lightningYellowColor),
                      padding: const EdgeInsets.symmetric(horizontal: 6),
                      margin: const EdgeInsets.symmetric(vertical: 6),
                      child: Padding(
                        padding: const EdgeInsets.only(bottom: 4.0),
                        child: Text(Language.filter.capitalizeByWord()),
                      )),
                ),
              ],
            ),
            const SizedBox(height: 10),*/
            
            return CustomScrollView(
              controller: _controller,
              slivers: [
                SliverPadding(
                  padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 20),
                  sliver: MultiSliver(
                    children: [
                      SliverToBoxAdapter(
                          child: SingleSellerInfo(
                              singleSellerModel: loadMoreBloc.homeSellerModel.singleSellerModel)),
                      const SizedBox(height: 20),
                      SliverGrid(
                        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                          crossAxisCount: 2,
                          crossAxisSpacing: 10,
                          mainAxisSpacing: 10,
                          mainAxisExtent: 300.0,
                        ),
                        delegate: SliverChildBuilderDelegate(
                          (BuildContext context, int index) {
                            return ProductCard(
                                productModel: loadMoreBloc.homeSellerModel.products[index]);
                          },
                          childCount: loadMoreBloc.homeSellerModel.products.length,
                        ),
                      ),
                    if (state is SellerProductLoadingState)
                      Container(
                          padding: const EdgeInsets.symmetric(vertical: 10),
                          width: 30,
                          child: const Center(child: CircularProgressIndicator())),
                    ],
                  ),
                )/*,
              ],
            )*/,
            /*const SizedBox(height: 20),
            if (state is! SellerProductLoadingState &&
              loadMoreBloc.homeSellerModel.products.isEmpty)
              Column(children: [
                const SizedBox(height: 40),
                CustomImage(path: Kimages.emptyOrder, width: theWidth
                    // height: 55,
                    ),
                Container(
                    padding: const EdgeInsets.symmetric(vertical: 10),
                    child: Center(
                        child: Text(Language.noItemsFound.capitalizeByWord())))
              ]),
            Expanded(
              child: GridView.builder(
                controller: _controller,
                padding: const EdgeInsets.all(15),
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  crossAxisSpacing: 16,
                  mainAxisSpacing: 16,
                  mainAxisExtent: 230,
                ),
                itemCount: loadMoreBloc.homeSellerModel.products.length,
                itemBuilder: (BuildContext context, int index) {
                  return ProductCard(productModel: loadMoreBloc.homeSellerModel.products[index]);
                },
              ),
            ),
            if (state is SellerProductLoadingState)
              Container(
                  padding: const EdgeInsets.symmetric(vertical: 10),
                  child: const CircularProgressIndicator()),*/
            ]);
            /*return CustomScrollView(
              controller: _controller,
              slivers: [
                SliverPadding(
                  padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 20),
                  sliver: MultiSliver(
                    children: [
                      SliverToBoxAdapter(
                          child: SingleSellerInfo(
                              singleSellerModel: loadMoreBloc.homeSellerModel.singleSellerModel)),
                      const SizedBox(height: 20),
                      SliverGrid(
                        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                          crossAxisCount: 2,
                          crossAxisSpacing: 10,
                          mainAxisSpacing: 10,
                          mainAxisExtent: 225.0,
                        ),
                        delegate: SliverChildBuilderDelegate(
                          (BuildContext context, int index) {
                            return ProductCard(
                                productModel: loadMoreBloc.homeSellerModel.products[index]);
                          },
                          childCount: loadMoreBloc.homeSellerModel.products.length,
                        ),
                      ),
                    if (state is SellerProductLoadingState)
                      Container(
                          padding: const EdgeInsets.symmetric(vertical: 10),
                          width: 30,
                          child: const Center(child: CircularProgressIndicator())),
                    ],
                  ),
                ),
              ],
            );*/
        },
      ),
    );
  }
}

class SingleSellerInfo extends StatelessWidget {
  const SingleSellerInfo({Key? key, required this.singleSellerModel})
      : super(key: key);
  final HomeSellerModel singleSellerModel;
  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Container(
            height: 130.0,
            decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(10),
            color: Colors.white,
            boxShadow: [
              BoxShadow(color: Colors.blueGrey, spreadRadius: 1),
            ],
          ),
            width: double.infinity,
            margin: const EdgeInsets.symmetric(horizontal: 0.0),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(10.0),
              child: CustomImage(
                  path: RemoteUrls.imageUrl(singleSellerModel.bannerImage),
                  fit: BoxFit.cover),
            
            )),
        Positioned.fill(
          child: Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 20.0, vertical: 0.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    /*buildSellerInfo(Icons.email, singleSellerModel.email),
                    buildSellerInfo(Icons.phone, singleSellerModel.phone),*/
                    /*buildSellerInfo(
                        Icons.location_on, singleSellerModel.address),*/
                  ],
                ),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      height: 60.0,
                      width: 60.0,
                      alignment: Alignment.center,
                      decoration: const BoxDecoration(
                          shape: BoxShape.circle, color: Colors.white),
                      child: Center(
                        child: CustomImage(
                          path: RemoteUrls.imageUrl(singleSellerModel.logo),
                          height: 30.0,
                        ),
                      ),
                    ),
                    const SizedBox(height: 2.0),
                    Text(
                      singleSellerModel.shopName,
                      style: GoogleFonts.inter(
                        fontWeight: FontWeight.w400,
                        fontSize: 12.0,
                        color: blackColor,
                      ),
                    )
                  ],
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget buildSellerInfo(IconData icon, String info) {
    return Row(
      children: [
        Padding(
          padding: const EdgeInsets.only(top: 6.0, right: 10.0),
          child: Icon(
            icon,
            size: 20.0,
          ),
        ),
        Text(info),
      ],
    );
  }
}